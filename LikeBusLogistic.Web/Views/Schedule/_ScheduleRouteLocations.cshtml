@model ScheduleRouteLocationsVM
@{
    var first = Model.ScheduleRouteLocations.FirstOrDefault();
    var last = Model.ScheduleRouteLocations.LastOrDefault();
    double totalDistance = 0;
}
<div class="uk-grid-small uk-text-center" uk-grid>
    <div class="uk-width-expand@s uk-visible@s">
        <label class="uk-form-label">Локация</label>
    </div>
    <div class="uk-width-1-6@s uk-width-1-3">
        <label class="uk-form-label">Прибытие</label>
    </div>
    <div class="uk-width-1-6@s uk-width-1-3">
        <label class="uk-form-label">Остановка<span class="uk-visible@m"> (мин.)</span></label>
    </div>
    <div class="uk-width-1-6@s uk-width-1-3">
        <label class="uk-form-label">Отправление</label>
    </div>
    <div class="uk-width-1-6@s uk-visible@s">
        <label class="uk-form-label">Расстояние<span class="uk-visible@m"> (км.)</span></label>
    </div>
</div>
<hr />
@foreach (var scheduleRouteLocation in Model.ScheduleRouteLocations)
{
    totalDistance += scheduleRouteLocation.Distance;
    var fullName = scheduleRouteLocation.LocationFullName ?? scheduleRouteLocation.RouteLocationFullName;
    <div class="uk-grid-small location-table" uk-grid data-route-location-id="@scheduleRouteLocation.RouteLocationId">
        <div class="uk-width-1-6@s uk-hidden@s uk-text-center">
            <p class="uk-text-muted uk-text-small">
                <span uk-icon="icon: info; ratio: 0.8;" uk-tooltip="@fullName"></span>
                <span class=" uk-link go-to-route-location">
                    @(scheduleRouteLocation.LocationName ?? scheduleRouteLocation.CityName ?? scheduleRouteLocation.LocationFullName)
                    @(totalDistance)км.
                </span>
            </p>
        </div>
        <div class="uk-width-expand uk-visible@s">
            <div class="uk-inline uk-width-1-1">
                <a class="uk-form-icon uk-form-icon-flip go-to-route-location" href="#" uk-icon="icon: info"></a>
                <input class="uk-input uk-form-small"
                       name="routeLocation"
                       data-route-location-id="@scheduleRouteLocation.RouteLocationId"
                       type="text"
                       value="@(scheduleRouteLocation.LocationFullName ?? scheduleRouteLocation.RouteLocationFullName)"
                       readonly>
            </div>
        </div>
        <div class="uk-width-1-6@s uk-width-1-3 uk-flex uk-flex-inline">
            <input class="uk-input uk-form-small timepicker @(scheduleRouteLocation.Equals(first) ? "" : "to-validate")"
                   type="text"
                   name="arrivalTime"
                   data-title="Прибытие в '@(scheduleRouteLocation.LocationName ?? scheduleRouteLocation.CityName ?? scheduleRouteLocation.LocationFullName)'"
                   value="@scheduleRouteLocation.ArrivalTime?.ToString(@"hh\:mm")"
                   placeholder=""
                   @(scheduleRouteLocation.Equals(first) ? "disabled" : "")>
            @if (!scheduleRouteLocation.Equals(first))
            {
                <a href="#" class="uk-margin-small-left uk-margin-auto-vertical clean-time" tabIndex="-1" uk-icon="close"></a>
            }
        </div>
        <div class="uk-width-1-6@s uk-width-1-3">
            <input class="uk-input uk-form-small stop-duration" type="text" placeholder="" disabled>
        </div>
        <div class="uk-width-1-6@s uk-width-1-3 uk-flex uk-flex-inline">
            <input class="uk-input uk-form-small timepicker @(scheduleRouteLocation.Equals(last) ? "" : "to-validate")"
                   type="text"
                   value="@scheduleRouteLocation.DepartureTime?.ToString(@"hh\:mm")"
                   placeholder=""
                   data-title="Отправление из '@(scheduleRouteLocation.LocationName ?? scheduleRouteLocation.CityName ?? scheduleRouteLocation.LocationFullName)'"
                   name="departureTime"
                   @(scheduleRouteLocation.Equals(last) ? "disabled" : "")>
            @if (!scheduleRouteLocation.Equals(last))
            {
                <a href="#" class="uk-margin-small-left uk-margin-auto-vertical clean-time" tabIndex="-1" uk-icon="close"></a>
            }
        </div>
        <div class="uk-width-1-6@s uk-visible@s">
            <input class="uk-input uk-form-small" type="number" step="1" value="@totalDistance" placeholder="" disabled>
        </div>
    </div>
    <hr />
}
<div class="uk-margin uk-width-1-1">
    <button class="uk-button uk-button-primary uk-button-small uk-margin-small-bottom uk-float-right" id="save-schedule-btn">Сохранить</button>
</div>

<script>
    $(document).ready(function () {
        $('.timepicker').each(function (i, e) {
            let _this = $(e);
            let picker = new Picker(e, {
                format: 'HH:mm',
                text: {
                    title: _this.data('title'),
                    cancel: 'Отмена',
                    confirm: 'Сохранить'
                },
                pick: function (e) {
                    let grid = _this.parents('.location-table');
                    let arrival;
                    let departure;
                    if (_this.is('[name="arrivalTime"]')) {
                        arrival = picker.getDate('HH:mm');
                        departure = grid.find('input[name="departureTime"]').val();
                    } else {
                        arrival  = grid.find('input[name="arrivalTime"]').val();
                        departure = picker.getDate('HH:mm');
                    }
                    let minutes = diff(arrival, departure);
                    if (minutes != null && !isNaN(minutes)) {
                        grid.find('input.stop-duration').val(minutes);
                    } else {
                        grid.find('input.stop-duration').val(null);
                    }
                }
            });
            _this.data('picker', picker);
            _this.next('.clean-time').click(function () {
                picker.reset();
            });
        });
      //  ({
		    //show_meridian:false,
		    //min_hour_value:0,
		    //max_hour_value:23,
		    //step_size_minutes:1,
		    //overflow_minutes:true,
      //      increase_direction: 'up',
      //      on_change: function (e) {
      //          let grid = $(e).parents('.location-table');
      //          arrival = grid.find('input[name="arrivalTime"]').val();
      //          departure = grid.find('input[name="departureTime"]').val();
      //          let minutes = diff(arrival, departure);
      //          if (minutes != null && !isNaN(minutes)) {
      //              grid.find('input.stop-duration').val(minutes);
      //          } else {
      //              grid.find('input.stop-duration').val(null);
      //          }
      //      }
      //  });

        function diff(start, end) {
            start = start.split(":");
            end = end.split(":");
            var startDate = new Date(0, 0, 0, start[0], start[1], 0);
            var endDate = new Date(0, 0, 0, end[0], end[1], 0);
            var diff = endDate.getTime() - startDate.getTime();
            if (diff == null || isNaN(diff)) {
                return null;
            } else {
                diff = diff / 60000;
                return diff < 0 ? diff + 1440 : diff
            }
        }

        $('.location-table').each(function (i, e) {
            let grid = $(e);
            arrival = grid.find('input[name="arrivalTime"]').val();
            departure = grid.find('input[name="departureTime"]').val();
            let minutes = diff(arrival, departure);
            if (minutes != null && !isNaN(minutes)) {
                grid.find('input.stop-duration').val(minutes);
            } else {
                grid.find('input.stop-duration').val(null);
            }
        });

        function validate() {
            let flag = true;
            $('#save-schedule-grid input.to-validate,select.to-validate').each(function (i, e) {
                if (!$(e).val()) {
                    flag = false;
                    $(e).addClass('uk-form-danger').focus(function () {
                        $(e).removeClass('uk-form-danger');
                    });
                }
            });
            return flag;
        }

        $('.go-to-route-location').click(function () {
            let _this = $(this);
            let id = _this.parents('.location-table').first().data('route-location-id');
            App.geo.route.setViewToRouteLocation(id);
        });

        $('#save-schedule-btn').click(function () {
            if (!validate()) {
                App.message.showError('Ошибка валидации', 'Заполните все поля!');
                return;
            }

            let schedule = {};
            let locations = [];
            let parent = $('#save-schedule-grid');
            let tables = $('.location-table');

            schedule.id = parent.find('input[name="id"]').val();
            schedule.name = parent.find('input[name="name"]').val();
            schedule.routeId = parent.find('select[name="routeId"]').val();
            tables.each(function (i, e) {
                var location = {
                    scheduleId: schedule.id
                };
                location.routeLocationId = $(e).find('input[name="routeLocation"]').data('route-location-id');
                location.arrivalTime = $(e).find('input[name="arrivalTime"]').val();
                location.departureTime = $(e).find('input[name="departureTime"]').val();
                locations.push(location);
            });

            let data = { schedule: schedule, locations: locations };
            App.postDataOnServer('@Url.Action("MergeSchedule", "Schedule")', data);
        });
    });
</script>
