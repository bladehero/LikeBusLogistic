@model ScheduleRouteLocationsVM
@{
    var first = Model.ScheduleRouteLocations.FirstOrDefault();
    var last = Model.ScheduleRouteLocations.LastOrDefault();
    double totalDistance = 0;
}
<div class="uk-grid-small uk-text-center" uk-grid>
    <div class="uk-width-expand@s uk-visible@s">
        <label class="uk-form-label">Location</label>
    </div>
    <div class="uk-width-1-6@s uk-width-1-3">
        <label class="uk-form-label">Arrival</label>
    </div>
    <div class="uk-width-1-6@s uk-width-1-3">
        <label class="uk-form-label">Stop<span class="uk-visible@m"> (min.)</span></label>
    </div>
    <div class="uk-width-1-6@s uk-width-1-3">
        <label class="uk-form-label">Departure</label>
    </div>
    <div class="uk-width-1-6@s uk-visible@s">
        <label class="uk-form-label">Distance<span class="uk-visible@m"> (km.)</span></label>
    </div>
</div>
<hr />
@foreach (var scheduleRouteLocation in Model.ScheduleRouteLocations)
{
    totalDistance += scheduleRouteLocation.ScheduleLocationDistance;
    var fullName = scheduleRouteLocation.ScheduleLocationCurrentName ?? scheduleRouteLocation.ScheduleLocationCurrentFullName;
    if (scheduleRouteLocation.ScheduleLocationIsBoundary)
    {
        <p class="uk-text-muted uk-text-center uk-margin-remove">
            <span uk-icon="download"></span>

            <span class="uk-text-middle">
                Boundary:
                @scheduleRouteLocation.ScheduleLocationPreviousCountryName -
                @scheduleRouteLocation.ScheduleLocationCurrentCountryName
            </span>
        </p>
        <hr />
    }
    <div class="uk-grid-small location-table" uk-grid
         data-previous-location-id="@scheduleRouteLocation.SchedulePreviousLocationId"
         data-current-location-id="@scheduleRouteLocation.ScheduleCurrentLocationId">
        <div class="uk-width-1-6@s uk-hidden@s uk-text-center">
            <p class="uk-text-muted uk-text-small">
                <span uk-icon="icon: info; ratio: 0.8;" uk-tooltip="@scheduleRouteLocation.ScheduleLocationCurrentFullName"></span>
                <span class=" uk-link go-to-route-location">
                    @(fullName)
                    @(totalDistance)km.
                </span>
            </p>
        </div>
        <div class="uk-width-expand uk-visible@s">
            <div class="uk-inline uk-width-1-1">
                <a class="uk-form-icon uk-form-icon-flip go-to-route-location" href="#" uk-icon="icon: info"></a>
                <input class="uk-input uk-form-small"
                       name="routeLocation"
                       type="text"
                       value="@(fullName)"
                       readonly>
            </div>
        </div>
        <div class="uk-width-1-6@s uk-width-1-3 uk-flex uk-flex-inline">
            <input class="uk-input uk-form-small timepicker @(scheduleRouteLocation.Equals(first) ? "" : "to-validate")"
                   type="text"
                   name="arrivalTime"
                   data-title="Arrival at '@(fullName)'"
                   value="@scheduleRouteLocation.ScheduleLocationArrivalTime?.ToString(@"hh\:mm")"
                   placeholder=""
                   @(scheduleRouteLocation.Equals(first) ? "disabled" : "")>
            @if (!scheduleRouteLocation.Equals(first))
            {
                <a href="#" class="uk-margin-small-left uk-margin-auto-vertical clean-time" tabIndex="-1" uk-icon="close"></a>
            }
        </div>
        <div class="uk-width-1-6@s uk-width-1-3">
            <input class="uk-input uk-form-small stop-duration" type="text" placeholder="" disabled>
        </div>
        <div class="uk-width-1-6@s uk-width-1-3 uk-flex uk-flex-inline">
            <input class="uk-input uk-form-small timepicker @(scheduleRouteLocation.Equals(last) ? "" : "to-validate")"
                   type="text"
                   value="@scheduleRouteLocation.ScheduleLocationDepartureTime?.ToString(@"hh\:mm")"
                   placeholder=""
                   data-title="Arrival from '@(fullName)'"
                   name="departureTime"
                   @(scheduleRouteLocation.Equals(last) ? "disabled" : "")>
            @if (!scheduleRouteLocation.Equals(last))
            {
                <a href="#" class="uk-margin-small-left uk-margin-auto-vertical clean-time" tabIndex="-1" uk-icon="close"></a>
            }
        </div>
        <div class="uk-width-1-6@s uk-visible@s">
            <input class="uk-input uk-form-small"
                   data-distance="@scheduleRouteLocation.ScheduleLocationDistance"
                   name="distance"
                   type="number"
                   step="1" value="@totalDistance"
                   disabled>
        </div>
    </div>
    <hr />
}
<div class="uk-margin uk-width-1-1">

    @if (!Model.HasConfirmedTrips)
    {
        if (Model.HideAutoSelect)
        {
            <button class="uk-button uk-button-secondary uk-button-small uk-margin-small-bottom uk-float-left" id="sync-schedule-btn">Sync</button>
        }
        else
        {
            <button class="uk-button uk-button-secondary uk-button-small uk-margin-small-bottom uk-float-left uk-margin-small-left" id="auto-schedule-btn">Auto</button>
        }
        <button class="uk-button uk-button-primary uk-button-small uk-margin-small-bottom uk-float-right" id="save-schedule-btn">Save</button>
    }
</div>

<script>
    $(document).ready(function () {
        $('div.picker.picker-fixed').remove();
        $('.timepicker').each(function (i, e) {
            let _this = $(e);
            let picker = new Picker(e, {
                format: 'HH:mm',
                text: {
                    title: _this.data('title'),
                    cancel: 'Cancel',
                    confirm: 'Save'
                },
                pick: function (e) {
                    let grid = _this.parents('.location-table');
                    let arrival;
                    let departure;
                    if (_this.is('[name="arrivalTime"]')) {
                        arrival = picker.getDate('HH:mm');
                        departure = grid.find('input[name="departureTime"]').val();
                    } else {
                        arrival = grid.find('input[name="arrivalTime"]').val();
                        departure = picker.getDate('HH:mm');
                    }
                    let minutes = diff(arrival, departure);
                    if (minutes != null && !isNaN(minutes)) {
                        grid.find('input.stop-duration').val(minutes);
                    } else {
                        grid.find('input.stop-duration').val(null);
                    }
                }
            });
            _this.next('.clean-time').click(function () {
                picker.reset();
            });
            _this.data('picker', picker);
        });

        function diff(start, end) {
            start = start.split(":");
            end = end.split(":");
            var startDate = new Date(0, 0, 0, start[0], start[1], 0);
            var endDate = new Date(0, 0, 0, end[0], end[1], 0);
            var diff = endDate.getTime() - startDate.getTime();
            if (diff == null || isNaN(diff)) {
                return null;
            } else {
                diff = diff / 60000;
                return diff < 0 ? diff + 1440 : diff
            }
        }

        $('.location-table').each(function (i, e) {
            let grid = $(e);
            arrival = grid.find('input[name="arrivalTime"]').val();
            departure = grid.find('input[name="departureTime"]').val();
            let minutes = diff(arrival, departure);
            if (minutes != null && !isNaN(minutes)) {
                grid.find('input.stop-duration').val(minutes);
            } else {
                grid.find('input.stop-duration').val(null);
            }
        });

        function validate() {
            let flag = true;
            $('#save-schedule-grid input.to-validate,select.to-validate').each(function (i, e) {
                if (!$(e).val()) {
                    flag = false;
                    $(e).addClass('uk-form-danger').focus(function () {
                        $(e).removeClass('uk-form-danger');
                    });
                }
            });
            return flag;
        }

        $('#auto-schedule-btn').click(function () {
            let departure = $('input[name="departureTime"]:first');
            let departureTime = departure.val();
            if (!departureTime) {
                App.message.showError('Error', 'Set arrival time').then(function () {
                    departure.click();
                    let picker = $('input[name="departureTime"]:first').data('picker');
                    let saveButton = $(picker.picker).find('button.picker-confirm');
                    const autoSelect = () => {
                        setTimeout(() => $('#auto-schedule-btn').click(), 200)
                        saveButton.off('click', autoSelect);
                    };
                    saveButton.on('click', autoSelect);
                });
                return;
            }


            Swal.fire({
                title: 'Automatic Schedule',
                text: "Are you sure you want to download the automatic schedule?",
                icon: 'info',
                showCancelButton: true,
                cancelButtonText: 'Cancel',
                confirmButtonText: 'OK'
            }).then((result) => {
                if (result.value) {
                    Swal.fire({
                        title: 'Stop duration:',
                        icon: 'question',
                        input: 'range',
                        inputAttributes: {
                            min: 0,
                            max: 60,
                            step: 1,
                            class: 'uk-range'
                        },
                        inputValue: 10
                    }).then((result) => {
                        if (!result.dismiss) {
                            let stopDuration = parseInt(result.value);
                            let minutes = getMinutes(departureTime);
                            if (minutes) {
                                $('input[name="arrivalTime"]:not(:first):enabled,input[name="departureTime"]:not(:first):not(:last):enabled').each(function (i, e) {
                                    let currentLocationId = $(e).parents('.location-table:first').data('current-location-id');
                                    let routeLocation = App.geo.route.getRouteLocationByLocationId(currentLocationId);
                                    let summary = routeLocation.tomTomLeg.summary;
                                    if ($(e).is('[name="departureTime"]')) {
                                        minutes += stopDuration;
                                    } else {
                                        minutes += parseInt(summary.travelTimeInSeconds / 60);
                                    }
                                    let p = $(e).data('picker');
                                    let d = new Date(0, 0, 0, parseInt(minutes / 60 % 24), parseInt(minutes % 60));
                                    p.setDate(d);
                                    setTimeout(function () {
                                        $(e).fadeOut().fadeIn();
                                        p.pick();
                                    }, 10 * i);
                                });
                            }
                        }
                    });
                }
            });

        });

        function getMinutes(time) {
            var a = time.split(':');
            var minutes = (+a[0]) * 60 + (+a[1]);
            return minutes;
        }

        $('.go-to-route-location').click(function () {
            let _this = $(this);
            let id = _this.parents('.location-table').first().data('current-location-id');
            App.geo.setView(id);
        });

        $('#save-schedule-btn').click(function () {
            if (!validate()) {
                App.message.showError('Validation error', 'Fill in all the fields!');
                return;
            }

            let schedule = {};
            let locations = [];
            let parent = $('#save-schedule-grid');
            let tables = $('.location-table');

            schedule.id = parent.find('input[name="id"]').val();
            schedule.name = parent.find('input[name="name"]').val();
            schedule.routeId = parent.find('select[name="routeId"]').val();
            tables.each(function (i, e) {
                var location = {
                    scheduleId: schedule.id
                };
                location.schedulePreviousLocationId = $(e).data('previous-location-id');
                location.scheduleCurrentLocationId = $(e).data('current-location-id');
                location.scheduleLocationArrivalTime = $(e).find('input[name="arrivalTime"]').val();
                location.scheduleLocationDepartureTime = $(e).find('input[name="departureTime"]').val();
                location.scheduleLocationDistance = $(e).find('input[name="distance"]').data('distance');
                locations.push(location);
            });

            let data = { schedule: schedule, locations: locations };
            App.postDataOnServer('@Url.Action("MergeSchedule", "Schedule")', data);
        });

        $('#sync-schedule-btn').click(function () {
            let routeId = $('select[name="routeId"] option:selected').val();
            let scheduleId = $('#save-schedule-grid input[name="id"]').val();
            let data = {};
            data.routeId = routeId;
            data.scheduleId = scheduleId;
            App.loadContent(
                '#schedule-route-locations',
                '@Url.Action("_ScheduleRouteLocations", "Schedule")',
                data
            );
        });
    });
</script>
