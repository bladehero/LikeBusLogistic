@model MergeTripVM
@{
    bool isEditable = Model.IsEditable;
}
    <div class="uk-grid-small" uk-grid id="save-trip-grid">
        <input type="hidden" name="id" value="@Model?.Id" />
        <input type="hidden" name="status" value="@Model?.Status" />

        <div class="uk-margin uk-margin-remove-top uk-width-auto">
            <label class="uk-form-label">Color</label>
            <div class="uk-form-controls custom-picker">
                <input type="hidden" name="color" value="@Model.Color" />
                <div id="color-picker" class=""></div>
            </div>
        </div>

        <div class="uk-margin uk-margin-remove-top uk-width-auto@m uk-width-expand">
            <label class="uk-form-label" for="form-stacked-text">Date</label>
            <div class="uk-form-controls">
                <input class="uk-input"
                       name="departure"
                       type="text"
                       placeholder="Date..."
                       value="@Model?.Departure"
                       @(isEditable ? "" : "disabled")>
            </div>
        </div>

        <div class="uk-margin uk-margin-remove-top uk-width-auto@m uk-width-expand">
            <label class="uk-form-label" for="form-stacked-text">Time</label>
            <div class="uk-form-controls">
                <input class="uk-input"
                       name="departureTime"
                       type="text"
                       placeholder="Time..."
                       value="@Model?.SelectedSchedule?.DepartureTime.ToString(@"hh\:mm")"
                       disabled>
            </div>
        </div>

        <div class="uk-margin uk-margin-remove-top uk-width-1-4@m uk-width-1-1">
            <label class="uk-form-label">Route</label>
            <div class="uk-form-controls">
                @Model.Schedules.SelectListWithEmptyOption(
                 x => x.Id,
                 x => $"{x.Name} ({x.RouteName})",
                 "Select schedule...",
                 Model?.SelectedSchedule?.Id,
                 isEditable ? (object)new { @class = "uk-select", name = "scheduleId" }
                 : (object)new { @class = "uk-select", name = "scheduleId", disabled = "disabled" },
                 x => new { data_route_id = x.RouteId, data_departure_time = x.DepartureTime.ToString(@"hh\:mm") })
            </div>
        </div>

        <div class="uk-margin uk-margin-remove-top uk-width-expand@m uk-width-1-1">
            <label class="uk-form-label">Bus</label>
            <div class="uk-form-controls">
                @Model.Buses.SelectListWithEmptyOption(
                 x => x.BusId,
                 x => $"{x.Fullname} ({x.Number})",
                 "Select a bus...",
                 Model?.SelectedBus?.BusId,
                 isEditable ? (object)new { @class = "uk-select", name = "busId", id = "bus-select" }
                 : (object)new { @class = "uk-select", name = "busId", id = "bus-select", disabled = "disabled" })
            </div>
        </div>

        <div class="uk-margin uk-margin-remove-top uk-width-1-1" id="trip-drivers"> </div>
    </div>

<script>
    App.footer.setBreadcrumbs([
        { name: 'Schedules', url: '@Url.Action("_FullInformation", "Trip")' },
        { name: '@(Model.Id == null ? "Add" : "Change")', url: '@Url.Action("_MergeTrip", "Trip")' }
    ]);
    App.geo.resetLocations('@Url.Action("GetLocations", "Home")');
    App.geo.route.clear();
    $(document).ready(function () {
        function dateDiffInTime(a, b) {
            let today = new Date();
            const utc1 = Date.UTC(today.getFullYear(), today.getMonth(), today.getDate(), a.getHours(), a.getMinutes());
            const utc2 = Date.UTC(today.getFullYear(), today.getMonth(), today.getDate(), b.getHours(), b.getMinutes());

            let diff_ms = utc2 - utc1;
            if (diff_ms > 0) {
                return 1;
            } else if (diff_ms < 0) {
                return -1;
            } else {
                return 0;
            }
        }

        let parentGrid = $('#save-trip-grid');
        let tripId = parentGrid.find('input[name="id"]').val();
        
        let colorInput = $('input[name="color"]');
        $('select[name="scheduleId"]').change(function () {
            let selected = $(this).find('option:selected').first();
            let color = colorInput.val();
            let routeId = selected.data('route-id');
            if (routeId) {
                App.geo.route.resetRouteLocations('@Url.Action("GetRouteLocations", "Route")', routeId, color);
                App.geo.route.setStartView();
            }
            let departureTime = selected.data('departure-time');
            $('input[name="departureTime"]').val(departureTime);

            const today = new Date();
            const tomorrow = new Date();
            tomorrow.setDate(new Date().getDate() + 1);
            let isTodayValid = true;
            if (departureTime) {
                let times = departureTime.split(':');
                let currentDate = new Date();
                currentDate.setHours(times[0]);
                currentDate.setMinutes(times[1]);
                isTodayValid = dateDiffInTime(today, currentDate) > 0;
            }
            $('input[name="departure"]').datetimepicker({
                        mask: true,
                        timepicker: false,
                        format: 'Y/m/d',
                        value: isTodayValid ? today : tomorrow,
                        minDate: isTodayValid ? today : tomorrow,
                        lang:'ru'
            });
        });
        $('select[name="scheduleId"]').change();

        if (!!tripId) {
            App.loadContent('div#trip-drivers', '@Url.Action("_TripDrivers", "Trip")', { tripId: tripId });
        } else {
            $('#bus-select').change(function () {
                let selected = $(this).find('option:selected').first();
                let busId = selected.val();
                App.loadContent('div#trip-drivers', '@Url.Action("_TripDrivers", "Trip")', { busId: busId });
            });
        }
        let tripColor = colorInput.val();
        const pickr = Pickr.create({
            el: '#color-picker',
            theme: 'nano',
            default: tripColor || App.geo.route.color,
            components: {
                preview: true,
                hue: true,
                interaction: {
                    hex: true,
                    input: true,
                    save: true
                }
            },
            strings: {
                save: 'Save'
            }
        });
        pickr.on('init', (color) => {
            var color = color._color.toHEXA().toString();
            colorInput.val(color);
        }).on('save', (color) => {
            let value = App.geo.route.color;
            if (color) {
                value = color.toHEXA().toString();
            }
            colorInput.val(value);
            App.geo.route.setPathOptions({ pulseColor: value });
        });
    });
</script>
