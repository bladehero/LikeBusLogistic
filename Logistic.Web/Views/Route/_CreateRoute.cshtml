@model Logistic.Web.Models.Routes.CreateRouteVM

<div class="uk-grid-small" uk-grid>
    <div class="uk-width-auto uk-margin-small-top">
        <ul class="uk-iconnav uk-iconnav-vertical">
            <li uk-tooltip="Undo previous action<br/><b>Ctrl</b> + <b>Z</b>">
                <a href="#" id="cancel-action" uk-icon="icon: history"></a>
            </li>
            <li uk-tooltip="Reset current route<br/><b>Ctrl</b> + <b>B</b>">
                <a href="#" id="reset" uk-icon="icon: close"></a>
            </li>
            <li uk-tooltip="Save current route<br/><b>Ctrl</b> + <b>M</b>">
                <a href="#" id="save" uk-icon="icon: check"></a>
            </li>
        </ul>
    </div>
    <div class="uk-width-expand">
        <small class="uk-padding-remove uk-margin-remove">Departure from:</small>
        <ul class="uk-breadcrumb uk-padding-remove uk-margin-remove" id="route-location-list">
            <li><span data-location-id="@Model.StartLocation.Id">@Model.StartLocation.FullName</span></li>
        </ul>
    </div>
</div>

<script>
    App.footer.setBreadcrumbs([{ name: 'Routes', url: '@Url.Action("_FullInformation", "Route")' }, { name: 'New route' }]);

    function getDistanceTitle(first, last) {
        let hasDifferentCountries = first.countryName !== last.countryName;
        let distanceName = (first.cityName || first.name || '?') +
                           (hasDifferentCountries ? ' (' + (first.countryName || '?') + ')' : '') + 
                           ' - ' + (last.cityName || last.name || '?') +
                           (hasDifferentCountries ? ' (' + (last.countryName || '?') + ')' : '');
        let title = distanceName;
        return title;
    }

    function initPosition() {
        App.geo.resetLocations('@Url.Action("GetLocations", "Home")');
        App.geo.route.clear();
        let start = @Html.Raw(Json.Serialize(Model.StartLocation));
        App.geo.route.routeLocations[0] = start;
        App.geo.setIconById(start.id, 'start');
        App.geo.setView(start.id);
        $('#route-location-list li:not(:first)').remove();
        for (let location of App.geo.locations) {
            setLogicForMarker(location);
        }
    }
    function setLogicForMarker(location) {
            location.marker.off('click');
            if (location.data.id !== @Model.StartLocation.Id) {
                location.marker.on('click', async function () {
                    App.message.loading();
                    let first = App.geo.route.routeLocations[App.geo.route.routeLocations.length - 1];
                    let last = location.data;
                    let leg = null;
                    App.postDataOnServer('@Url.Action("GetDistanceInfo", "Route")',
                        { locationId1: first.id || first.currentLocationId, locationId2: last.id || last.currentLocationId },
                        function (result) {
                            if (result.success) {
                                leg = result.data;
                            }
                        },
                        null,
                        'GET',
                        false
                    );

                    let title = getDistanceTitle(first, last);
                    let inputValue = Math.round(leg.tomTomLeg.summary.lengthInMeters / 1000);
                    if (!inputValue) {
                        await Swal.fire({
                            title: title,
                            input: 'number',
                            inputPlaceholder: 'Distance (km.)'
                        }).then(result => {
                            if (result.value != null) {
                                location.data.distance = parseFloat(result.value);
                                location.data.tomTomLeg = leg.tomTomLeg;
                                let first = addToRoute(location.data);
                                location.marker.off('click').on('click', async function () {
                                    let last = location.data;
                                    let title = getDistanceTitle(first, last);
                                    await Swal.fire({
                                        title: title,
                                        input: 'number',
                                        inputPlaceholder: 'Distance (km.)',
                                        inputValue: location.data.distance
                                    }).then(result => {
                                        if (result.value != null) {
                                            location.data.distance = parseFloat(result.value);
                                            resetRouteList();
                                        }
                                    });
                                });
                            }
                        });
                    } else {
                        Swal.fire({
                            icon: 'success',
                            title: 'Added',
                            timer: 1500,
                            html: '<b>' + title + '</b><br/>Distance: ' + inputValue + 'km.',
                            showConfirmButton: false
                        });
                        location.data.distance = parseFloat(inputValue);
                        location.data.tomTomLeg = leg.tomTomLeg;
                        let first = addToRoute(location.data);
                        location.marker.off('click').on('click', async function () {
                            let last = location.data;
                            let title = getDistanceTitle(first, last);
                            await Swal.fire({
                                title: title,
                                input: 'number',
                                inputPlaceholder: 'Distance (km.)',
                                inputValue: location.data.distance
                            }).then(result => {
                                if (result.value != null) {
                                    location.data.distance = parseFloat(result.value);
                                    resetRouteList();
                                }
                            });
                        });
                    }
                    
                });
            }
    }
    initPosition();

    function cancelLastAction() {
        if (App.geo.route.routeLocations.length > 1) {
            let id = App.geo.route.routeLocations.pop().id;
            let location = App.geo.getLocationById(id);
            setLogicForMarker(location);
            $('#route-location-list li:last').remove();
            App.geo.route.setRouteLocations(App.geo.route.routeLocations);
        }
    }

    function resetRouteList() {
        let html = '';
        for (let location of App.geo.route.routeLocations) {
            html += '<li><span data-location-id="' + location.id + '"> '
            if (location.distance != null) {
                html += '(' + location.distance + 'km.) ';
            }
            html += location.fullName + '</span></li>';
        }
        $('#route-location-list').html(html);
    }

    function addToRoute(location) {
        let previous = App.geo.route.routeLocations[App.geo.route.routeLocations.length - 1];
        App.geo.route.routeLocations[App.geo.route.routeLocations.length] = location;
        resetRouteList();
        App.geo.route.setRouteLocations(App.geo.route.routeLocations); 
        return previous;
    }

    async function saveRoute() {
        if (!App.geo.route.routeLocations || App.geo.route.routeLocations.length <= 1) {
            App.message.showError('Error', 'The route must include at least two locations!');
            return;
        }
        let locations = App.geo.route.getLocations();
        App.message.showMessage('info', 'Check', 'The current route sheets are being compared ...', 0, false);
        App.postDataOnServer(
            '@Url.Action("IsRouteMatch", "Route")',
            { locations: locations },
            async function (result) {
                let response;
                if (result.data) {
                    await Swal.fire({
                        title: 'Warning',
                        text: 'A match is found, the route has exactly the same path. Are you sure you want to continue?',
                        icon: 'warning',
                        showCancelButton: true,
                        cancelButtonText: 'Cancel',
                    }).then(function (res) {
                        response = !res.value;
                    });
                }

                if (response) {
                    return;
                }

                let first = locations[0];
                let last = locations[locations.length - 1];
                let hasDifferentCountries = first.countryName !== last.countryName;
                let routeName = (first.cityName || first.name || '?') +
                                (hasDifferentCountries ? ' (' + (first.countryName || '?') + ')' : '') + 
                                ' - ' + (last.cityName || last.name || '?') +
                                (hasDifferentCountries ? ' (' + (last.countryName || '?') + ')' : '');
                let hours = 0;
                App.geo.route.routeLocations.forEach(function (el){
                    let prop = 'tomTomLeg.summary.travelTimeInSeconds';
                    let seconds = App.getPropertyOrDefault(el, prop, 0) / 3600;
                    hours += seconds;
                });
                hours = Math.round((hours + Number.EPSILON) * 10) / 10;
                let formValues = await Swal.fire({
                    title: 'Creating a new route',
                    html: '<div class="uk-margin uk-text-left">'+
                          '    <label class="uk-form-label" for="form-stacked-text">Route name</label>'+
                          '    <div class="uk-form-controls">'+
                          '        <input class="uk-input" id="route-name" type="text" value="' + routeName + '" placeholder="Enter route name...">'+
                          '    </div>'+
                          '</div>'+
                          '<div class="uk-margin uk-text-left">'+
                          '    <label class="uk-form-label" for="form-stacked-text">Expected duration (hours)</label>'+
                          '    <div class="uk-form-controls">'+
                          '        <input class="uk-input" id="route-duration" type="number" value="' + hours + '" step="0.5" placeholder="Enter route duration ...">'+
                          '    </div>'+
                          '</div>',
                    focusConfirm: false,
                    showCancelButton: true,
                    cancelButtonText: "Cancel",
                    preConfirm: () => {
                        return [
                            $('#route-name').val(),
                            $('#route-duration').val()
                        ]
                    }
                });
                if (formValues && !formValues.dismiss) {
                    let name = formValues.value[0];
                    let duration = formValues.value[1];
                    App.postDataOnServer(
                        '@Url.Action("CreateRoute", "Route")',
                        { locations: App.geo.route.getLocations(), name: name, estimatedDurationInHours: duration }
                    );
                }
            }
        );
    }
    $(document).ready(function () {
        setTimeout(function () {
            $(document).keypress(function (e) {
                if (e.ctrlKey) {
                    if (e.code == 'KeyZ') {
                        cancelLastAction();
                    }
                    if (e.code == 'KeyB') {
                        initPosition();
                    }
                    if (e.code == 'KeyM') {
                        saveRoute();
                    }
                }
            });
        }, 500);
    });
    $('#cancel-action').click(cancelLastAction);
    $('#reset').click(initPosition);
    $('#save').click(saveRoute);

    $(document).on('click', '#route-location-list li', function () {
        let _this = $(this);
        App.geo.setView(_this.find('span').data('location-id'));
    });
</script>